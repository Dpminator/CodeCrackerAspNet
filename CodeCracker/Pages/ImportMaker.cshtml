@page
@model CodeCracker.Pages.ImportMakerModel;
@{
    Layout = null;
}
<html>
<head>
    <title>Import a Puzzle</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link href='https://fonts.googleapis.com/css?family=Patrick+Hand' rel='stylesheet'>
    <style type='text/css'>
        table tr td.black { background: #000000; }
        table tr td.white { background: #ffffff; }
        #TitleInput { color: #000000; font-size: 35px; }
        h1 { color: #000000; font-size: 36px; text-align: center; }
        h2 { text-align: center; font-size: 20px; }
        div.regular {  position: relative; bottom: 4px; }

        body {
            background: #e3cd73;
            color: #000000;
            margin-right: 20px;
            margin-left: 20px;
            font-size: 14px;
            font-family: Arial, sans-serif, sans;
        }

        table {
            border: 1px solid #000000;
            margin-left: auto;
            margin-right: auto;
            padding: 0px;
            border-spacing: 0px;
            font-family: sans;
            font-size: 170%;
        }

        table td {
            border: 1px solid #666666;
            padding: 0px;
            background: #000000;
            color: #ffffff;
            text-align: center;
            width: 32px;
            height: 32px;
            font-family: 'Patrick Hand';
            line-height: 0%;
        }

        div.small {
            font-size: 55%;
            text-align: left;
            line-height: 100%;
            position: relative;
            bottom: 9px;
            left: 1px;
        }

        td input {
            padding: 0;
            border: 0px;
            margin: 0px;
            width: 30px;
            height: 30px;
            text-align: center;
            font-size: 24px;
            font-family: 'Patrick Hand';
            color: #000000
        }
    </style>
    <script type="text/javascript">
        var Title = "@Model.Title";
        var GridHeight = @Model.GridHeight;
        var GridWidth = @Model.GridWidth;
        var Letters = "@Model.Letters";
        var Grid = CreateGrid("@Model.Code");

        function CreateGrid(code)
        {
            var grid = new Array();
            for (var i = 0; i < GridHeight; i++)
            {
                grid[i] = new Array();
                for (var j = 0; j < GridWidth; j++)
                {
                    grid[i][j] = 0;
                }
            }

            if (code != "")
            {
                var i = 0;
                var j = 0;
                function incrementCount()
                {
                    if (++j == GridWidth)
                    {
                        j = 0;
                        i++;
                    }
                }

                for (var x = 0; x < code.length; x++)
                {
                    if (IsLetterLowercase(code[x]))
                    {
                        //If its a number of blanks
                        for (var y = 0; y < AlpabetLetterToNumber(code[x]); y++)
                        {
                            grid[i][j] = 0;
                            incrementCount();
                        }
                    }
                    else 
                    {   
                        //If its a coded number
                        grid[i][j] = AlpabetLetterToNumber(code[x]);
                        incrementCount();
                    }
                }
            }

            return grid;
        }

        function ToggleSquare(id, canDoOpposite = true)
        {
            var row = id.split("x")[0];
            var col = id.split("x")[1];
            var SquareElement = document.getElementById(id);
			if (SquareElement.className == 'white')
			{
                SquareElement.className = 'black';
                SquareElement.removeAttribute("OnDblClick");
                SquareElement.setAttribute("OnClick", "ToggleSquare(id)");
                SquareElement.firstChild.setAttribute("hidden", "");

			}else
			{
                SquareElement.className = 'white';
                SquareElement.removeAttribute("OnClick");
                SquareElement.setAttribute("OnDblClick", "ToggleSquare(id)");
                SquareElement.firstChild.removeAttribute("hidden");
            }
            Grid[row][col] = -1 * Grid[row][col];

			if (canDoOpposite && document.getElementById("SymmetricalGrid").checked && !(row == (GridHeight-1)/2 && col == (GridWidth-1)/2))
            {
                ToggleSquare(((GridHeight - 1) - row) + "x" + ((GridWidth - 1) - col), false);
			}
            UpdateSolveButton();
        }

        function UpdateSolveButton()
        {
            var code = CreateCodeFromGrid();
            if (code == "?")
            {
                return "<button style='position: absolute; bottom:550px; left:1250px;' disabled>Solve this puzzle!</button>";
            }

            Title = document.getElementById("TitleInput").value;
            var href = "/PuzzleResults?name=" + Title + "&height=" + GridHeight + "&width=" + GridWidth + "&letters=" + Letters + "&code=" + code;
            var ButtonHtml = "<button style='position: absolute; bottom:550px; left:1250px;' onclick =\"window.location.href='" + href + "'\">Solve this puzzle!</button>";
            document.getElementById("SolveButton").innerHTML = ButtonHtml;
        }

        function CreateCodeFromGrid()
        {
            var code = "";
            var currentConsecutiveBlanks = 0;

            for (var i = 0; i < GridHeight; i++)
            {
                for (var j = 0; j < GridWidth; j++)
                {
                    var numCodeInt = Grid[i][j];
                    if (numCodeInt <= 0)
                    {
                        if (document.getElementById(i + "x" + j).className == "white")
                        {
                            return "?";
                        } else
                        {
                            currentConsecutiveBlanks++;
                            continue;
                        }
                    }
                    if (currentConsecutiveBlanks > 0)
                    {
                        code += NumToAlphabetLetter(currentConsecutiveBlanks, false);
                        currentConsecutiveBlanks = 0;
                    }
                    code += NumToAlphabetLetter(numCodeInt);
                }
            }
            if (currentConsecutiveBlanks > 0) code += NumToAlphabetLetter(currentConsecutiveBlanks, false);

            return code;
        }

		function UpdateCell(id)
		{
			var rowcol = id.split("x");
			var row = rowcol[0];
            var column = rowcol[1];
            var inputElement = document.getElementById(id).firstChild;
            var Number = parseInt(inputElement.value);
            inputElement.style.color = "#f00000";
			if (Number != "NaN")
			{
				Grid[row][column] = Number;
                UpdateSolveButton();
                if (Number > 0 && Number <= 26)
                {
                    inputElement.style.color = "#000000";
                }
            }
        }

        function UpdateKnownLetters(id)
        {
            var letter = document.getElementById(id).value;

            if (letter.length > 1)
            {
                document.getElementById(id).value = letter.substring(0, 1);
                letter = letter.trim();
            }
            if (letter.length == 0) letter = " ";

            var letterChar = letter.charAt(0);

            if (letterChar != " " && !IsLetter(letterChar))
            {
                document.getElementById(id).style.color = "#f00000";
            } else
            {
                document.getElementById(id).style.color = "#008800";
            }

            Letters = "";
			for (i = 1; i <= 26; i++)
            {
                var klValue = document.getElementById("KnownLetter" + i).value;
				if (klValue.length == 1 && IsLetter(klValue))
				{
					if (i < 10)
					{
						Letters = Letters + "0" + i + klValue.toLowerCase() + ",";
					}else
					{
						Letters = Letters + i + klValue.toLowerCase() + ",";
					}
				}
            }

            UpdateSolveButton();
        }

        function NumToAlphabetLetter(number, capital = true)
        {
            if (number > 26)
            {
                var letfoverNum = num % 26;
                var whole26 = (num - letfoverNum) / 26;
                var result = "";

                for (var i = 0; i < whole26; i++)
                    result = result + "z";
                result = result + NumToAlphabetLetter(letfoverNum, false);

                return result
            }

            if (!capital)
            {
                return NumToAlphabetLetter(number).toLowerCase();
            }

            switch (number)
            {
                case 1: return "A";
                case 2: return "B";
                case 3: return "C";
                case 4: return "D";
                case 5: return "E";
                case 6: return "F";
                case 7: return "G";
                case 8: return "H";
                case 9: return "I";
                case 10: return "J";
                case 11: return "K";
                case 12: return "L";
                case 13: return "M";
                case 14: return "N";
                case 15: return "O";
                case 16: return "P";
                case 17: return "Q";
                case 18: return "R";
                case 19: return "S";
                case 20: return "T";
                case 21: return "U";
                case 22: return "V";
                case 23: return "W";
                case 24: return "X";
                case 25: return "Y";
                case 26: return "Z";
                default: return "?";
            }
        }

        function AlpabetLetterToNumber(letter)
        {
            letter = letter.toUpperCase();

            switch (letter)
            {
                case 'A': return 1;
                case 'B': return 2;
                case 'C': return 3;
                case 'D': return 4;
                case 'E': return 5;
                case 'F': return 6;
                case 'G': return 7;
                case 'H': return 8;
                case 'I': return 9;
                case 'J': return 10;
                case 'K': return 11;
                case 'L': return 12;
                case 'M': return 13;
                case 'N': return 14;
                case 'O': return 15;
                case 'P': return 16;
                case 'Q': return 17;
                case 'R': return 18;
                case 'S': return 19;
                case 'T': return 20;
                case 'U': return 21;
                case 'V': return 22;
                case 'W': return 23;
                case 'X': return 24;
                case 'Y': return 25;
                case 'Z': return 26;
                default: return 0;
            }
        }

        function IsLetter(character)
        {
            return ((character >= 'a' && character <= 'z') || (character >= 'A' && character <= 'Z'));
        }

        function IsLetterLowercase(character)
        {
            return (character >= 'a' && character <= 'z');
        }
    </script>
</head>
<body>
    <div>
        <h1>Puzzle Title: <input name='PuzzleNote' id="TitleInput" value="@Model.Title" type="text" oninput="UpdateSolveButton()"></h1>
        <div id='SymmetricalGridButton' style='text-align: center;'>Symmetrical grid: <input id='SymmetricalGrid' type='checkbox' checked></div><br>
        <table id='GridTable'>
            @for (int i = 0; i < Model.GridHeight; i++)
            {
                <tr>
                    @for (int j = 0; j < Model.GridWidth; j++)
                    {
                        var id = i + "x" + j;
                        <td id='@id' class='black' onClick='ToggleSquare(id)'><input hidden type='text' style='color:#f00000' value='??' oninput="UpdateCell('@id')"></td>
                    }
                </tr>
            }
        </table>

        <h2>Letters:</h2>
        <table class='letters'>
            <tr>
                @for (int i = 1; i <= 13; i++)
                {
                    <td>@i:</td>
                }
            </tr>
            <tr>
                @for (int i = 1; i <= 13; i++)
                {
                    var id = "KnownLetter" + i;
                    <td><input type='text' id='@id' value='' style='color:#008800' oninput="UpdateKnownLetters(id)"></td>
                }
            </tr>
            <tr>
                @for (int i = 14; i <= 26; i++)
                {
                    <td>@i:</td>
                }
            </tr>
            <tr>
                @for (int i = 14; i <= 26; i++)
                {
                    var id = "KnownLetter" + i;
                    <td><input type='text' id='@id' value='' style='color:#008800' oninput="UpdateKnownLetters(id)"></td>
                }
            </tr>
        </table>
    </div>
    <div id='SolveButton'><button style='position: absolute; bottom:550px; left:1250px;' disabled>Solve this puzzle!</button></div>
    <div id='DisplayGrid' style="position: absolute; bottom:350px; left:1500px; text-align: left;">...</div>
    <script>
        for (var i = 0; i < GridHeight; i++) for (var j = 0; j < GridWidth; j++) if (Grid[i][j] > 0)
        {
            var SquareElement = document.getElementById(i + "x" + j);
            SquareElement.className = 'white';
            SquareElement.removeAttribute("OnClick");
            SquareElement.setAttribute("OnDblClick", "ToggleSquare(id)");
            SquareElement.firstChild.removeAttribute("hidden");
            SquareElement.firstChild.value = Grid[i][j];
            SquareElement.firstChild.style.color = "#000000";
        }
        var letterPairs = "@Model.Letters".length == 0 ? "" :"@Model.Letters".split(",");
        for (var i = 0; i < letterPairs.length; i++)
        {
            var num = parseInt(letterPairs[i].substring(0, 2));
            var letter = letterPairs[i].substring(2, 3);
            document.getElementById("KnownLetter" + num).value = letter.toLocaleUpperCase();
        }
        UpdateSolveButton();
    </script>
</body>
</html>