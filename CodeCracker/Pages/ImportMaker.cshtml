@page
@model CodeCracker.Pages.ImportMakerModel;
@{
    Layout = null;
}
<html>
<head>
    <title>Import a Puzzle</title>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link href='https://fonts.googleapis.com/css?family=Patrick+Hand' rel='stylesheet'>

    <style type='text/css'>
        body {
            background: #e3cd73;
            color: #000000;
            margin-right: 20px;
            margin-left: 20px;
            font-size: 14px;
            font-family: Arial, sans-serif, sans;
        }

        h1 {
            color: #000000;
            font-size: 36px;
            text-align: center;
        }

        #PuzzleNoteInput {
            color: #000000;
            font-size: 35px;
        }

        h2 {
            text-align: center;
            font-size: 20px;
        }

        table {
            border: 1px solid #000000;
            margin-left: auto;
            margin-right: auto;
            padding: 0px;
            border-spacing: 0px;
            font-family: sans;
            font-size: 170%;
        }

        table td {
            border: 1px solid #666666;
            padding: 0px;
            background: #000000;
            color: #ffffff;
            text-align: center;
            width: 32px;
            height: 30px;
            font-family: 'Patrick Hand';
            line-height: 0%;
        }

        table tr td.black {
            background: #000000;
        }

            table tr td.white {
                background: #ffffff;
            }

        table.Phase1 tr td:hover {
            cursor: pointer;
        }

        div.small {
            font-size: 55%;
            text-align: left;
            line-height: 100%;
            position: relative;
            bottom: 9px;
            left: 1px;
        }

        div.regular {
            position: relative;
            bottom: 4px;
        }

        td input {
            padding: 0;
            border: 0px;
            margin: 0px;
            width: 32px;
            height: 30px;
            text-align: center;
            font-size: 24px;
            font-family: 'Patrick Hand';
            color: #000000
        }
    </style>

    <script type="text/javascript">
		var Grid =
		[
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];

        var Phase = 1;
        var Title = "Puzzle 1";
        var OldCode = "";
        var GridHeight = @Model.GridHeight;
        var GridWidth = @Model.GridWidth;
        var Letters = "";

		function ToggleSquare(id)
        {
            var rowcol = id.split("x");
			if (document.getElementById(id).className == 'white')
			{
				document.getElementById(id).className = 'black';
				Grid[rowcol[0]][rowcol[1]] = 0;
			}else
			{
				document.getElementById(id).className = 'white';
				Grid[rowcol[0]][rowcol[1]] = 1;
			}

			if (document.getElementById("SymmetricalGrid").checked == true && !(rowcol[0] == (GridHeight-1)/2 && rowcol[1] == (GridWidth-1)/2) )
			{
				var row = (GridHeight - 1) - rowcol[0];
				var column = (GridWidth - 1) - rowcol[1];

				if (document.getElementById(id).className == 'black')
				{
					document.getElementById(row + "x" + column).className = 'black';
					Grid[row][column] = 0;
				}else
				{
					document.getElementById(row + "x" + column).className = 'white';
					Grid[row][column] = 1;
				}
			}
			UpdateCurrentGrid();
		}

		function UpdateCurrentGrid()
		{
            var GridString = "";
			for (i = 0; i < GridHeight; i++)
			{
				for (j = 0; j < GridWidth; j++)
				{
					if (Phase == 1)
					{
						if (Grid[i][j] == 0)
                        {
							GridString = GridString + "00";
						}else
						{
							GridString = GridString + "??";
						}
					}else
					{
						if (Grid[i][j] == 0)
						{
							GridString = GridString + "00";
						}else
						{
							if (Grid[i][j] == -1)
							{
								GridString = GridString + "??";
								continue;
							}
							if (Grid[i][j] > 9)
							{
								GridString = GridString + Grid[i][j];
							}else
							{
								GridString = GridString + "0" + Grid[i][j];
							}
						}
					}

                }
				GridString = GridString + "<br>";
			}
            OldCode = GridString;
            GridString = @Model.GridHeight + "x" + @Model.GridWidth + "<br>" + GridString;
            Letters = "";
			for (i = 1; i <= 26; i++)
			{
				if (document.getElementById("KnownLetter" + i).value != "?" && document.getElementById("KnownLetter" + i).value != "")
				{
					if (i < 10)
					{
						Letters = Letters + "0" + i + document.getElementById("KnownLetter" + i).value.toLowerCase() + " ";
					}else
					{
						Letters = Letters + i + document.getElementById("KnownLetter" + i).value.toLowerCase() + " ";
					}
				}
			}

            GridString = GridString + Letters + "<br>";
            Letters = Letters.trim().replace(/ /g, ",");
			GridString = GridString + document.getElementById("PuzzleNoteInput").value;
            document.getElementById("DisplayGrid").innerHTML = GridString;

            if (Phase == 2)
            {
                document.getElementById("SolveButton").innerHTML = CreateSolveButton();
            }
		}

        function ConvertOldLinesToNewCode()
        {
            var newCode = "";
            var currentConsecutiveBlanks = 0;
            var oldLines = OldCode.split("<br>");

            for (var lineNum = 0; lineNum < GridHeight; lineNum++)
            {
                var line = oldLines[lineNum];
                for (var i = 0; i < GridWidth; i++)
                {
                    var numCodeStr = line.substring(i * 2, (i * 2) + 2);
                    var numCodeInt = parseInt(numCodeStr);
                    if (isNaN(numCodeInt))
                    {
                        newCode += "?";
                        return newCode;
                    }
                    if (numCodeInt == 0)
                    {
                        currentConsecutiveBlanks++;
                        continue;
                    }
                    if (currentConsecutiveBlanks > 0)
                    {
                        newCode += NumToAlphabetLetter(currentConsecutiveBlanks).toLowerCase();
                        currentConsecutiveBlanks = 0;
                    }
                    newCode += NumToAlphabetLetter(numCodeInt);
                }
            }
            if (currentConsecutiveBlanks > 0) newCode += NumToAlphabetLetter(currentConsecutiveBlanks, false);
            

            return newCode;
        }

        function NumToAlphabetLetter(number, capital = true)
        {
            if (!capital)
            {
                return NumToAlphabetLetter(number).toLowerCase();
            }

            switch (number)
            {
                case 1: return "A";
                case 2: return "B";
                case 3: return "C";
                case 4: return "D";
                case 5: return "E";
                case 6: return "F";
                case 7: return "G";
                case 8: return "H";
                case 9: return "I";
                case 10: return "J";
                case 11: return "K";
                case 12: return "L";
                case 13: return "M";
                case 14: return "N";
                case 15: return "O";
                case 16: return "P";
                case 17: return "Q";
                case 18: return "R";
                case 19: return "S";
                case 20: return "T";
                case 21: return "U";
                case 22: return "V";
                case 23: return "W";
                case 24: return "X";
                case 25: return "Y";
                case 26: return "Z";
                default: return "?";
            }
        }

        function CreateSolveButton()
        {
            var code = ConvertOldLinesToNewCode();
            if (code.indexOf("?") >= 0)
            {
                return "<button style='position: absolute; bottom:550px; left:1250px;' disabled>Solve this puzzle!</button>";
            }

            var href = "/PuzzleResults?name=" + Title + "&height=" + GridHeight + "&width=" + GridWidth + "&letters=" + Letters + "&code=" + code;
            var ButtonHtml = "<button style='position: absolute; bottom:550px; left:1250px;' onclick =\"window.location.href='" + href + "'\">Solve this puzzle!</button>";
            return ButtonHtml;
        }

		function SwitchGrid()
		{
            document.getElementById("SwitchGridButton").innerHTML = CreateSolveButton();
            document.getElementById("SwitchGridButton").id = "SolveButton";
			document.getElementById("SymmetricalGridButton").remove();
			Phase = 2;
			document.getElementById("MainTable").className = "Phase2";
			var TableString = "";

			for (i = 0; i < GridHeight; i++)
			{
				TableString = TableString + "<tr>\n"
				for (j = 0; j < GridWidth; j++)
				{
					if (Grid[i][j] == 0)
					{
						TableString = TableString + "<td class = 'black'></td>\n";
					}else
					{
						TableString = TableString + "<td class = 'white'><input type = 'text' style='color:#f00000' id = '" + i + "x" + j + "' value = '??' oninput=\"UpdateCell(id)\"></td>\n";
						Grid[i][j] = -1;
					}
				}
				TableString = TableString + "</tr>\n"
			}
			document.getElementById("MainTable").innerHTML = TableString;
		}

		function UpdateCell(id)
		{
			var rowcol = id.split("x");
			var row = rowcol[0];
			var column = rowcol[1];
            var Number = parseInt(document.getElementById(id).value);
            document.getElementById(id).style.color = "#f00000";
			if (Number != "NaN")
			{
				Grid[row][column] = Number;
                UpdateCurrentGrid();
                if (Number > 0 && Number <= 26)
                {
                    document.getElementById(id).style.color = "#000000";
                }
            }
        }

        function UpdateKnownLetters(id)
        {
            var letter = document.getElementById(id).value;

            if (letter.length > 1)
            {
                if (letter.substring(0, 1) == "?")
                    document.getElementById(id).value = letter.substring(1, 2);
                else
                    document.getElementById(id).value = letter.substring(0, 1);
                letter = letter.trim();
            }
            if (letter.length == 0 || letter == " ")
            {
                document.getElementById(id).value = "?";
            }

            var letterChar = letter.charAt(0);

            if (letterChar != "?" && !IsLetter(letterChar)) {
                document.getElementById(id).style.color = "#f00000";
            } else
            {
                document.getElementById(id).style.color = "#000000";
            }

            UpdateCurrentGrid();
        }

        function IsLetter(character)
        {
            return ((character >= 'a' && character <= 'z') || (character >= 'A' && character <= 'Z'));
        }


    </script>
</head>

<body>
    <div>
        <h1>Puzzle Title: <input name='PuzzleNote' id="PuzzleNoteInput" value="Puzzle 1" type="text" oninput="UpdateCurrentGrid()"></h1>
        <div id='SymmetricalGridButton' style='text-align: center;'>Symmetrical grid: <input id='SymmetricalGrid' type='checkbox' checked></div><br>
        <table id='MainTable' class='Phase1'>
            @for (int i = 0; i < Model.GridHeight; i++)
            {
                <tr>
                @for (int j = 0; j < Model.GridWidth; j++)
                {
                    var id = i + "x" + j;
                    <td id='@id' class='white' onClick='ToggleSquare(id)'></td>
                }
                </tr>
            }
        </table>

        <h2>Letters:</h2>
        <table class='letters'>
            <tr>
                @for (int i = 1; i <= 13; i++)
                { 
                    <td>@i:</td>
                }
            </tr>
            <tr>
                @for (int i = 1; i <= 13; i++)
                {
                    var id = "KnownLetter" + i;
                    <td><input type='text' id='@id' value='?' oninput="UpdateKnownLetters(id)"></td>
                }
            </tr>
            <tr>
                @for (int i = 14; i <= 26; i++)
                {
                    <td>@i:</td>
                }
            </tr>
            <tr>
                @for (int i = 14; i <= 26; i++)
                {
                    var id = "KnownLetter" + i;
                    <td><input type='text' id='@id' value='?' oninput="UpdateKnownLetters(id)"></td>
                }
            </tr>
        </table>
    </div>
    <div id='SwitchGridButton'><button onclick="SwitchGrid()" style='position: absolute; bottom:550px; left:1250px;'>Finished selecting squares!</button></div>
    <div id='DisplayGrid' style="position: absolute; bottom:350px; left:1500px; text-align: left;">
        19x15<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        ??????????????????????????????<br>
        letters<br>
        Puzzle 1<br>
    </div>
</body>
</html>

